module node_%MODULENAME%(
				  RST, 
				  ST,
				  CLK,
				  RD,
				  RES,
				  %IN%
				  );
   input wire RST;
   input wire ST;
   reg st_old;
   input wire CLK;
   output reg RD;
   output reg [%BW%-1:0] RES;
%IN_DEF%
%rIN_DEF%
   reg [3:0] 		   state;
%SOUT_DEF%
%rSOUT_DEF%
   wire [%BW%-1:0] 	   pRES;
%RD_DEF%
   wire 			   pRD;
   wire 			   lRD;
%ST_DEF%
   reg  			   pST;

//   starter starter_(RST, CLK, ST, Stout);

   assign lRD = %RD_AND%;

   always @(posedge CLK) begin
	  if(RST == 1) begin
		 state = 0;
%rSOUT_ZERO%
		 RD = 0;
		 RES = 0;
%ST_ZERO%
		 pST = 0;
%rIN_ZERO%
	  end //Reset

	  case (state)
		0: begin 
		   state = 0;
%rSOUT_ZERO%
%rIN_IN%
		   RD = 1;
		   RES = 0;
%ST_ZERO%
		   pST = 0;
		   if ((st_old == 0) && (ST == 1)) state = 1;
		end
		1: begin
		   RD = 0;		   
%ST_ONE%
		   state = 2;
		end
		2: begin
		   state = 3;
		end
		3: begin
			state = 4;
		end
		4: begin
%ST_ZERO%
		   if (lRD == 1) state = 5;
		end
		5: begin
%rSOUT_SOUT%
		   pST = 1;
		   state = 6;
		end
		6: begin
		   state = 7;
		end
		7: begin
			state = 8;
		end
		8: begin
		   pST = 0;
		   if (pRD == 1 & pRES == 0) state = 11;
		   if (pRD == 1 & pRES > 0) state = 9;
		end
		9: begin
		   RD = 1;
		   RES = rIN0;//rSOUT0;
		   state = 10;
		end
		10: begin
%rIN_IN%
		   if ((st_old == 0) && (ST == 1)) state = 1;	   
		end
		11: begin
%rIN_rSOUT%
			state = 1;
		end
	  endcase // case (state)
	  st_old = ST;
   end
%IN_MODULES%
%PRED_MODULE%

endmodule // modulename

   
