#Increment A + 1
(def INC 
	(ADD 
		((ONE) A)
	) 
	(A)
)

#Decrement B - 1
(def DEC 
	(SUB (B (ONE))) 
	(B)
)


#subtraction
(def SUB 
	(FOR 
		((IF ((ZERO) (INC (IN2)) (EQ (IN0 (INC (IN1))))) (IN2 IN3 IN0))
		(NOP (IN1))
		(NOP (IN2)) 
		(INC (IN3)) 
		(INC (IN4)) 
		(ADD ((EQ (IN2 IN3)) (EQ (IN1 IN4)))))
		((ZERO) A B A B)
	)
	(A B)
)

#Multiplication D * E
(def MUL 
	(FOR 
		((ADD (IN0 IN1)) (NOP (IN1)) (DEC (IN2)) (EQ (IN2 (ZERO)))) 
		((ZERO) D E)) 
	(D E)
)

#Modulus F % G
(def MOD 
	(FOR ((SUB (IN0 IN1)) (NOP (IN1)) (LT (IN0 IN1))) (F G)) 
	(F G)
)

#Division F / G
(def DIV 
	(FOR 
		((IF ((NOP (IN0)) (INC (IN0)) (GT (IN0 (DEC (IN1))))) (IN0 IN1)) (SUB (IN1 IN2)) (NOP (IN2)) (EQ (IN1 (ZERO)))) 
		((ZERO) F G)) 
	(F G)
)

#Less then H < I
(def LT 
	(IF 
		((ZERO) (ONE) (SUB (IN0 IN1)))
		(H I)
	) 
	(H I)
)

#Greater then IN0 > IN1
(def GT 
	(IF 
		((ONE) (ZERO) (SUB (IN0 IN1)))
		(A B)
	)
	(A B)
)